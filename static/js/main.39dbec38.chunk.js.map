{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","handleChange","type","placeholder","onChange","App","event","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAYeA,EAVF,SAAAC,GACT,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA2BF,EAAMG,QAAQC,GAAzC,0BAAsEC,IAAI,aAClF,6BAAML,EAAMG,QAAQG,OACpB,4BAAKN,EAAMG,QAAQI,YCIhBC,G,MARE,SAAAR,GACb,OACI,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,WCOjDO,G,MAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,uBACIX,UAAU,SACVY,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCiCPI,E,kDAlCb,aAAe,IAAD,8BACZ,gBAaFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAkBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,aAAegB,KAAKhB,eAC/B,cAAC,EAAD,CAAUH,SAAWoB,W,GA7BXI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.39dbec38.chunk.js","sourcesContent":["import './Card.css';\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={ `https://robohash.org/${props.monster.id}?set=set2&size=180x180` } alt=\"Monsters\"/>\r\n            <h2>{ props.monster.name }</h2>\r\n            <p>{ props.monster.email }</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Card;","import Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            { props.monsters.map(monster => <Card key={ monster.id } monster={ monster } />) }\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CardList;","import './SearchBox.css';\r\n\r\nconst SearchBox = ({ handleChange }) => {\r\n    return (\r\n        <input\r\n            className='search' \r\n            type=\"search\" \r\n            placeholder='Search Monsters'\r\n            onChange={handleChange} \r\n        />\r\n    );\r\n}\r\n \r\nexport default SearchBox;","import { Component } from 'react';\n\nimport './App.css';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = event => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return(\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox handleChange={ this.handleChange  } />\n        <CardList monsters={ filteredMonster } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}